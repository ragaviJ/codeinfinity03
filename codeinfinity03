load("@local_config_cuda//cuda:build_defs.bzl", "if_cuda") 
load("@local_config_cuda//cuda:build_defs.bzl", "cuda_default_copts") 
load("@org_tensorflow//tensorflow:tensorflow.bzl", "check_deps") 

def tf_copts(): 
return (["-fno-exceptions", "-DEIGEN_AVOID_STL_ARRAY",] + 
if_cuda(["-DGOOGLE_CUDA=1"]) + 
select({"@org_tensorflow//tensorflow:darwin": [], 
"//conditions:default": ["-pthread"]})) 



def tf_gen_op_libs(op_lib_names): 
 
 
for n in op_lib_names: 
native.cc_library(name=n + "_op_lib", 
copts=tf_copts(), 
srcs=["ops/" + n + ".cc"], 
deps=(["@org_tensorflow//tensorflow/core:framework"]), 
visibility=["//visibility:public"], 
alwayslink=1, 
linkstatic=1,) 

def tf_gen_op_wrapper_py(name, out=None, hidden=[], visibility=None, deps=[], 
require_shape_functions=False): 
tool_name = "gen_" + name + "_py_wrappers_cc" 
if not deps: 
deps = ["@org_tensorflow//tensorflow/core:" + name + "_op_lib"] 
native.cc_binary( 
name = tool_name, 
linkopts = ["-lm"], 
copts = tf_copts(), 
linkstatic = 1, # Faster to link this one-time-use binary dynamically 
deps = (["@org_tensorflow//tensorflow/core:framework", 
"@org_tensorflow//tensorflow/python:python_op_gen_main"] + deps), 
) 

 
if not out: 
out = "ops/gen_" + name + ".py" 

native.genrule( 
name=name + "_pygenrule", 
outs=[out], 
tools=[tool_name], 
cmd=("$(location " + tool_name + ") " + ",".join(hidden) 
+ " " + ("1" if require_shape_functions else "0") + " > $@")) 

 
native.py_library(name=name, 
srcs=[out], 
srcs_version="PY2AND3", 
visibility=visibility, 
deps=[],) 

def tf_custom_op_library_additional_deps(): 
return [ 
"@org_tensorflow//third_party/eigen3", 
"@org_tensorflow//tensorflow/core:framework_headers_lib", 
"@protobuf//:protobuf", 
] 

def tf_custom_op_library(name, srcs=[], gpu_srcs=[], deps=[];
 
cuda_deps = [ 
"@org_tensorflow//tensorflow/core:stream_executor_headers_lib", 
"@local_config_cuda//cuda:cudart_static", 
] 
deps = deps + tf_custom_op_library_additional_deps() 
if gpu_srcs: 
basename = name.split(".")[0] 
native.cc_library( 
name = basename + "_gpu", 
srcs = gpu_srcs, 
copts = tf_copts() + cuda_default_copts(), 
deps = deps + if_cuda(cuda_deps)) 
cuda_deps.extend([":" + basename + "_gpu"]) 

check_deps(name=name+"_check_deps", 
deps=deps + if_cuda(cuda_deps), 
disallowed_deps=["@org_tensorflow//tensorflow/core:framework", 
"@org_tensorflow//tensorflow/core:lib"]) 

native.cc_binary(name=name, 
srcs=srcs, 
deps=deps + if_cuda(cuda_deps), 
data=[name + "_check_deps"], 
copts=tf_copts(), 
linkshared=1, 
linkopts = select({ 
"//conditions:default": [ 
"-lm", 
], 
"@org_tensorflow//tensorflow:darwin": [], 
}), 
) 

def tf_custom_op_py_library(name, srcs=[], dso=[], kernels=[], 
srcs_version="PY2AND3", visibility=None, deps=[]):
 
kernels = kernels # unused argument 
native.py_library( 
name=name, 
data=dso, 
srcs=srcs, 
srcs_version=srcs_version, 
visibility=visibility, 
deps=deps, 
) 

def tf_cuda_library(deps=None, cuda_deps=None, copts=None, **kwargs): 
if not deps: 
deps = [] 
if not cuda_deps: 
cuda_deps = [] 
if not copts: 
copts = [] 

native.cc_library( 
deps = deps + if_cuda(cuda_deps + [ 
"@org_tensorflow//tensorflow/core:cuda", 
"@local_config_cuda//cuda:cuda_headers" 
]), 
copts = copts + if_cuda(["-DGOOGLE_CUDA=1"]), 
**kwargs) 

def tf_kernel_library(name, prefix=None, srcs=None, gpu_srcs=None, hdrs=None, 
deps=None, alwayslink=1, copts=tf_copts(), **kwargs): 
if not srcs: 
srcs = [] 
if not hdrs: 
hdrs = [] 
if not deps: 
deps = [] 

if prefix: 
if native.glob([prefix + "*.cu.cc"], exclude = ["*test*"]): 
if not gpu_srcs: 
gpu_srcs = [] 
gpu_srcs = gpu_srcs + native.glob([prefix + "*.cu.cc", prefix + "*.h"], 
exclude = [prefix + "*test*"]) 
srcs = srcs + native.glob([prefix + "*.cc"], 
exclude = [prefix + "*test*", prefix + "*.cu.cc"]) 
hdrs = hdrs + native.glob([prefix + "*.h"], exclude = [prefix + "*test*", 
prefix + "*.cu.h"]) 

cuda_deps = ["@org_tensorflow//tensorflow/core:gpu_lib"] 
if gpu_srcs: 
for gpu_src in gpu_srcs: 
if gpu_src.endswith(".cc") and not gpu_src.endswith(".cu.cc"): 
fail("{} not allowed in gpu_srcs. .cc sources must end with .cu.cc".format(gpu_src)) 
tf_gpu_kernel_library( 
name = name + "_gpu", 
srcs = gpu_srcs, 
deps = deps, 
**kwargs) 
cuda_deps.extend([":" + name + "_gpu"]) 

tf_cuda_library( 
name = name, 
srcs = srcs, 
hdrs = hdrs, 
copts = copts, 
cuda_deps = cuda_deps, 
linkstatic = 1, 
alwayslink = alwayslink, 
deps = deps, 
**kwargs) 
def tf_gpu_kernel_library(srcs, copts=[], cuda_copts=[], deps=[], hdrs=[], 
**kwargs): 
copts = copts + if_cuda(cuda_copts) + tf_copts() 

native.cc_library( 
srcs = srcs, 
hdrs = hdrs, 
copts = copts, 
deps = deps + if_cuda([ 
"@org_tensorflow//tensorflow/core:cuda", 
"@org_tensorflow//tensorflow/core:gpu_lib", 
]), 
alwayslink=1, 
**kwargs)
